# NOTE: Keep the order correct!!
modules = [
  "Standard",
  "GeomAbs",
  "TopAbs",
  "Precision",
  "NCollection",
  "gp",
  "math",
  "Geom2d",
  "Geom",
  "TopLoc",
  "TopoDS",
  "TopExp",
  "Poly",
  "Message",
  "ChFi2d",
  "Law",
  "TopOpeBRepDS",
  "TopOpeBRepBuild",
  "TopTools",
  "BRepTools",
  "BRepBuilderAPI",
  "BRepPrim",
  "BRepPrimAPI",
  "BRepOffsetAPI",
  "BRepFilletAPI",
  "BOPDS",
  "BOPAlgo",
  "BRepAlgoAPI",
  "BRepFeat",
  "BRepClass3d",
  "GC",
  "GeomFill",
  "IntTools",
  "Adaptor2d",
  "Adaptor3d",
  "Geom2dAdaptor",
  "GeomAdaptor",
  "BRepAdaptor",
  "BRep",
  "BRepLib",
  "Bnd",
  "CPnts",
  "GeomConvert",
  "IMeshTools",
  "BRepGProp",
  "GProp",
  "GeomLib",
  "GeomProjLib",
  "Quantity",
  "Approx",
  "CSLib",
  "BRepExtrema",
  "ShapeExtend",
  "ShapeConstruct",
  "ShapeAnalysis",
  "ShapeFix",
  "GeomAPI",
  "TDF",
  "XCAFPrs",
  "LOAbs",
  "LODoc",
  "LOUtil",
]

immutable_type = [
  "Standard_Boolean",
  "Standard_CString",
  "Standard_Integer",
  "Standard_Real",
  "NCollection_Array1",
  "NCollection_Array2",
  "NCollection_List",
  "NCollection_Sequence",
  "NCollection_Vec2",
  "NCollection_Vec3",
  "NCollection_Vec4",
  "handle",
  "TCollection_AsciiString",
  "TCollection_ExtendedString",
  "BVH_Vec3d",
]

template_class = [
  "NCollection_DataMap",
  "NCollection_DoubleMap",
  "NCollection_IndexedDataMap",
  "NCollection_IndexedMap",
  "NCollection_Map",
]

extra_modules = []

[lua_operators]
"operator+" = "__add"
"operator-" = "__sub"
"operator*" = "__mul"
"operator/" = "__div"
"operator==" = "__eq"

[black_list]
class = [
  "Standard",
  "Standard_UUID",                           # FIXME: Handle array field.
  "CPnts_MyGaussFunction",
  "CPnts_MyRootFunction",
  "Message_ProgressScope",
  "TDF_Attribute",
  "TDF_Data",
  "TDF_LabelNode",
  "TDF_TagSource",
  "XCAFPrs_Style",
  "BRepFeat_MakeRevolutionForm",             # FIXME: Evil constructor!
  "BRepExtrema_OverlapTool",
  "ShapeFix_WireSegment",                    # FIXME: Unimplemented constructor.
  "ShapeAnalysis_BoxBndTreeSelector",        # Symbol cannot be resolved.
  "BRepClass3d_BndBoxTreeSelectorLine",      # No need to expose to public.
  "BRepClass3d_BndBoxTreeSelectorPoint",     # Same.
  "BRepClass3d_MapOfInter",                  # Fuck pointers.
  "BRepTools_MapOfVertexPnt2d",              # Don't know how to deal with template parameters, needs manual methods?
  "TopOpeBRepDS_ShapeSurface",               # Same.
  "ShapeAnalysis_DataMapOfShapeListOfReal",  # Same.
  "ShapeExtend_DataMapOfTransientListOfMsg", # Same.
  "ShapeExtend_DataMapOfShapeListOfMsg",     # Same.
]
method_by_name = ["DumpJson", "get_type_name", "get_type_descriptor"]
method = [
  "Standard_GUID::ToCString",
  "Standard_GUID::ToExtString",
  "Standard_GUID::ShallowDump",
  "IntTools_PntOnFace::IsValid",
  "IntTools_PntOn2Faces::IsValid",
  "BOPAlgo_PaveFiller::Iterator",
  "BRepOffsetAPI_FindContigousEdges::NbEdges",                   # Symbol cannot be resolved
  "BRepFeat::IsInOut",                                           # Same.
  "BRepFeat_MakeLinearForm::TransformShapeFU",                   # Same.
  "Law_Interpolate::ClearTangents",                              # Same.
  "TopOpeBRepBuild_Builder1::GFillSplitsPVS",                    # Same.
  "GeomAPI_Interpolate::ClearTangents",                          # Same.
  "BRepTools_PurgeLocations::ModifiedShape",                     # Same.
  "ShapeAnalysis_BoxBndTreeSelector::Accept",                    # Same.
  "ShapeAnalysis_BoxBndTreeSelector::Reject",                    # Same.
  "BRepGProp_VinertGK::GetAbsolutError",                         # Same.
  "LODoc_Document::Context",
  "LODoc_Document::SetContext",
  "LODoc_Document::Document",
  "TDF_Label::Data",
  "TDF_Label::Father",
  "TDF_Label::Root",
  "TDF_Label::AddAttribute",
  "TDF_Label::FindAttribute",
  "TDF_Label::ForgetAttribute",
  "TDF_Label::ForgetAllAttributes",
  "TDF_Label::ResumeAttribute",
  "TDF_Label::Dump",
  "TDF_Label::ExtendedDump",
  "TDF_Label::EntryDump",
  "BRepExtrema_ProximityDistTool::ProximityPointsStatus",        # Interval enum
  "BRepExtrema_ProximityDistTool::LoadAdditionalPointsFirstSet", # Not exported
  "BRepExtrema_TriangleSet::Box",                                # WTF
  "TopTools_IndexedDataMapOfShapeListOfShape::FindFromKey",      # Fuck templates!
]
copyable = [
  "Geom_SweptSurface",
  "LODoc_DocumentExplorer",
  "Approx_SameParameter",
  "GeomAPI_ProjectPointOnSurf",
  "GeomAPI_ExtremaCurveSurface",
  "GeomAPI_ExtremaCurveCurve",
  "BRepExtrema_ExtPF",
  "BRepExtrema_ExtCF",
  "BRepExtrema_ExtCC",
  "BRepExtrema_ExtPC",
  "BRepExtrema_ExtFF",
  "ShapeAnalysis_Surface",
  "BRepClass3d_SolidClassifier",
  "BRepClass3d_SolidExplorer",
]

[extra_method]
gp_XYZ = '''
.addFunction("__tostring",+[](const gp_XYZ &theSelf){
  std::ostringstream oss{};
  oss << "gp_XYZ{" << theSelf.X() << ',' << theSelf.Y() << ',' << theSelf.Z() << '}';
  return oss.str();
})'''
gp_Pnt = '''
.addFunction("__unm",+[](const gp_Pnt &theSelf){
  return gp_Pnt(-theSelf.X(), -theSelf.Y(), -theSelf.Z());
})
.addFunction("__tostring",+[](const gp_Pnt &theSelf){
  std::ostringstream oss{};
  oss << "gp_Pnt{" << theSelf.X() << ',' << theSelf.Y() << ',' << theSelf.Z() << '}';
  return oss.str();
})'''
gp_Dir = '''
.addFunction("__tostring",+[](const gp_Dir &theSelf){
  std::ostringstream oss{};
  oss << "gp_Dir{" << theSelf.X() << ',' << theSelf.Y() << ',' << theSelf.Z() << '}';
  return oss.str();
})'''
gp_Vec = '''
.addFunction("__tostring",+[](const gp_Vec &theSelf){
  std::ostringstream oss{};
  oss << "gp_Vec{" << theSelf.X() << ',' << theSelf.Y() << ',' << theSelf.Z() << '}';
  return oss.str();
})'''
gp_Quaternion = '''
.addFunction("__tostring",+[](const gp_Quaternion &theSelf){
  std::ostringstream oss{};
  oss << "gp_Quaternion{" << theSelf.X() << ',' << theSelf.Y() << ',' << theSelf.Z() << ',' << theSelf.W() << '}';
  return oss.str();
})'''
Standard_GUID = '''
.addFunction("__tostring",+[](const Standard_GUID &theSelf) -> std::string {
  char s[37];
  theSelf.ToCString(s);
  return s;
})'''

[manual_method]
"Bnd_OBB::ReBuild" = '''
+[](Bnd_OBB &__theSelf__,const TColgp_Array1OfPnt &theListOfPoints,const Standard_Boolean theIsOptimal){
  TColgp_Array1OfPnt thePnts{theListOfPoints.First(),0,theListOfPoints.Length()-1};
  __theSelf__.ReBuild(thePnts, nullptr, theIsOptimal);
},
+[](Bnd_OBB &__theSelf__,const TColgp_Array1OfPnt &theListOfPoints,const TColStd_Array1OfReal &theListOfTolerance,const Standard_Boolean theIsOptimal){ 
  TColgp_Array1OfPnt thePnts{theListOfPoints.First(),0,theListOfPoints.Length()-1};
  TColStd_Array1OfReal theTols{theListOfTolerance.First(),0,theListOfTolerance.Length()-1};
  __theSelf__.ReBuild(thePnts,&theTols,theIsOptimal);
}'''
"Bnd_OBB::GetVertex" = '''
+[](const Bnd_OBB &theSelf){
  std::array<gp_Pnt,8> theResult{};
  theSelf.GetVertex(theResult.data());
  return theResult;
}'''
"GeomConvert::ConcatG1" = '''
+[](const TColGeom_Array1OfBSplineCurve &arrayOfCurve,const TColStd_Array1OfReal &arrayOfToler,const Standard_Boolean closeFlag,const Standard_Real closedTolerance)->std::tuple<TColGeom_Array1OfBSplineCurve, Standard_Boolean> {
  Standard_Boolean closedG1Flag = closeFlag;
  Handle(TColGeom_HArray1OfBSplineCurve) arrayOfConcatenated = nullptr;
  TColGeom_Array1OfBSplineCurve inputs(arrayOfCurve.First(),0,arrayOfCurve.Length()-1);
  TColStd_Array1OfReal tolers(arrayOfToler.First(), 0, arrayOfToler.Length()-1);
  try { GeomConvert::ConcatG1(inputs,tolers,arrayOfConcatenated,closedG1Flag,closedTolerance); }
  catch (const Standard_Failure &f) { throw std::runtime_error(f.GetMessageString()); }
  catch (...) { throw std::runtime_error("Unkonw error"); }
  TColGeom_Array1OfBSplineCurve result = arrayOfConcatenated->Array1();
  return {result, closedG1Flag};
}'''
"Quantity_Color::Convert_LinearRGB_To_sRGB" = '''
+[](Standard_Real theLinearValue) -> Standard_Real {
  return Quantity_Color::Convert_LinearRGB_To_sRGB(theLinearValue);
}'''
"Quantity_Color::Convert_sRGB_To_LinearRGB" = '''
+[](Standard_Real theRGBValue) -> Standard_Real {
  return Quantity_Color::Convert_sRGB_To_LinearRGB(theRGBValue);
}'''
"BRepTools_History::Merge" = '''
+[](BRepTools_History &self, const Handle(BRepTools_History) &theH) {
  self.Merge(theH);
}
'''
